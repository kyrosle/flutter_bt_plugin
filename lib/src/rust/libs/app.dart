// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.25.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../api/bt_api.dart';
import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

class ChannelHistory {
  final ThruputHistory down;
  final ThruputHistory up;

  const ChannelHistory({
    required this.down,
    required this.up,
  });

  @override
  int get hashCode => down.hashCode ^ up.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ChannelHistory &&
          runtimeType == other.runtimeType &&
          down == other.down &&
          up == other.up;
}

class FileStats {
  final FileInfo info;
  final int complete;

  const FileStats({
    required this.info,
    required this.complete,
  });

  @override
  int get hashCode => info.hashCode ^ complete.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FileStats &&
          runtimeType == other.runtimeType &&
          info == other.info &&
          complete == other.complete;
}

class ThruputHistory {
  final int peak;
  final int total;

  /// Historical data of download rates.
  final Uint64List rates;

  const ThruputHistory({
    required this.peak,
    required this.total,
    required this.rates,
  });

  @override
  int get hashCode => peak.hashCode ^ total.hashCode ^ rates.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ThruputHistory &&
          runtimeType == other.runtimeType &&
          peak == other.peak &&
          total == other.total &&
          rates == other.rates;
}

/// Holds state about a single torrent.
class Torrent {
  final String name;
  final String infoHash;
  final int pieceLen;
  final int downloadLen;
  final StorageInfo storage;
  final Duration runDuration;
  final PieceStats pieces;
  final Peers peers;
  final List<FileStats> files;
  final ChannelHistory protocol;
  final ChannelHistory payload;
  final int wastedPayloadCount;

  const Torrent({
    required this.name,
    required this.infoHash,
    required this.pieceLen,
    required this.downloadLen,
    required this.storage,
    required this.runDuration,
    required this.pieces,
    required this.peers,
    required this.files,
    required this.protocol,
    required this.payload,
    required this.wastedPayloadCount,
  });

  @override
  int get hashCode =>
      name.hashCode ^
      infoHash.hashCode ^
      pieceLen.hashCode ^
      downloadLen.hashCode ^
      storage.hashCode ^
      runDuration.hashCode ^
      pieces.hashCode ^
      peers.hashCode ^
      files.hashCode ^
      protocol.hashCode ^
      payload.hashCode ^
      wastedPayloadCount.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Torrent &&
          runtimeType == other.runtimeType &&
          name == other.name &&
          infoHash == other.infoHash &&
          pieceLen == other.pieceLen &&
          downloadLen == other.downloadLen &&
          storage == other.storage &&
          runDuration == other.runDuration &&
          pieces == other.pieces &&
          peers == other.peers &&
          files == other.files &&
          protocol == other.protocol &&
          payload == other.payload &&
          wastedPayloadCount == other.wastedPayloadCount;
}
